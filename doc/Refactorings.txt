1) Interfaz con demasiadas responsabilidades
2) Split Interface
3) Class refactoring
4) Dividí la interfaz Person en dos interfaces más específicas: PersonalInfo y HealthInfo. Esto separa las responsabilidades relacionadas con la información personal y la salud en interfaces distintas, mejorando la cohesión y facilitando la implementación de las clases que las implementan.
5) 3 cambios manuales, para las 3 clases


1) Nombres de método poco descriptivos o incoherentes.
2) Rename methods
3) Method refactoring
4) Se han renombrado los métodos en las interfaces PersonalInfo y HealthInfo para que reflejen mejor su propósito específico. Por ejemplo, weight() se ha renombrado a getWeight() y calculateIdealWeight() se ha renombrado a calculateIdealBodyWeight(), entre otros.
5) 4 cambios manuales 


1) Funcionalidad de múltiples responsabilidades en una misma clase.
2) Extract class
3) Class refactoring
4) Se ha extraído la funcionalidad relacionada con el cálculo de la salud de la clase Controlador a una nueva clase llamada HealthCalculator. Esto mejora la cohesión y la modularidad del código al separar las responsabilidades de cada clase.
5) 4 cambios manuales


1) Método con muchos parámetros
2) Introduce Parameter Object
3) Method Refactoring
4) Se creó una nueva clase HealthParameters para agrupar los parámetros relacionados con la salud en un solo objeto. Esto simplifica los métodos que necesitaban muchos parámetros relacionados y mejora la cohesión del código.
5) 5 cambios manuales

